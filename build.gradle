plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18-SNAPSHOT' 
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
	id "org.owasp.dependencycheck" version "10.0.4"
}

group = 'com.ldiamond'
version = '6.1.0-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'org.springframework:spring-web'
	implementation group: 'commons-codec', name: 'commons-codec'

	implementation group: 'org.knowm.xchart', name: 'xchart', version: '3.8.8'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
	implementation group: 'com.github.librepdf', name: 'openpdf', version: '2.0.3'
	implementation("com.google.guava:guava:33.3.0-jre")

	testImplementation 'org.mockito:mockito-junit-jupiter:5.13.0'
	testImplementation 'com.ldiamond:architectureunittests:2.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

sonarqube {
    properties {
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectKey", "larrydiamond_sqgraph"
		property "sonar.organization", "larrydiamond-github"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.scm.disabled", "true"
		property "sonar.sources", "src/main/java/com/ldiamond/sqgraph"
		property "sonar.coverage.exclusions", 
			"src/main/java/com/ldiamond/sqgraph/Config.java,src/main/java/com/ldiamond/sqgraph/SearchHistory.java,src/main/java/com/ldiamond/sqgraph/ValidationResult.java,src/main/java/com/ldiamond/sqgraph/MetricsResults.java"
		property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.jacoco.reportPaths","build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}

dependencyCheck {
    nvd {
        apiKey = System.getenv('NVD_KEY')
		delay = 16000
    }
}
