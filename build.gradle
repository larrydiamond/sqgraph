plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18-SNAPSHOT' 
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
    id "org.sonarqube" version "6.1.0.5360"
	id "org.owasp.dependencycheck" version "12.1.1"
	id("org.openrewrite.rewrite") version("7.6.1")
}

group = 'com.ldiamond'
version = '7.0.1-SNAPSHOT'
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	rewrite("org.openrewrite.recipe:rewrite-testing-frameworks:latest.release")
	rewrite("org.openrewrite.recipe:rewrite-static-analysis:latest.release")
	rewrite("org.openrewrite.recipe:rewrite-migrate-java:latest.release")
	rewrite("org.openrewrite.recipe:rewrite-spring:latest.release")
	rewrite("org.openrewrite.recipe:rewrite-testing-frameworks:latest.release")

	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'org.springframework:spring-web'
	implementation group: 'commons-codec', name: 'commons-codec'

	implementation group: 'org.knowm.xchart', name: 'xchart', version: '3.8.+'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.+'
	implementation group: 'com.github.librepdf', name: 'openpdf', version: '2.0.+'
	implementation("com.google.guava:guava:33.4.8-jre")

	testImplementation 'org.mockito:mockito-junit-jupiter:5.17.+'
	testImplementation 'com.ldiamond:architectureunittests:latest.release'
	testImplementation 'com.tngtech.archunit:archunit-junit5:latest.release'
}

tasks.named('test') {
	useJUnitPlatform()
}

sonarqube {
    properties {
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectKey", "larrydiamond_sqgraph"
		property "sonar.organization", "larrydiamond-github"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.scm.disabled", "true"
		property "sonar.sources", "src/main/java/com/ldiamond/sqgraph"
		property "sonar.coverage.exclusions", 
			"src/main/java/com/ldiamond/sqgraph/Config.java,src/main/java/com/ldiamond/sqgraph/SearchHistory.java,src/main/java/com/ldiamond/sqgraph/ValidationResult.java,src/main/java/com/ldiamond/sqgraph/MetricsResults.java"
		property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.jacoco.reportPaths","build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}

dependencyCheck {
    nvd {
        apiKey = System.getenv('NVD_KEY')
		delay = 16000
    }
}

// gradle rewriteRun
rewrite {
	activeRecipe("org.openrewrite.java.testing.archunit.ArchUnit0to1Migration")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertEqualsBooleanToAssertBoolean")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertEqualsNullToAssertNull")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertFalseEqualsToAssertNotEquals")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertFalseNegationToAssertTrue")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertFalseNullToAssertNotNull")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertLiteralBooleanToFailRecipes")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertNotEqualsBooleanToAssertBoolean")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueComparisonToAssertEquals")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueEqualsToAssertEquals")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueNegationToAssertFalse")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueNullToAssertNull")
	activeRecipe("org.openrewrite.java.testing.junit5.CleanupAssertions")
	activeRecipe("org.openrewrite.java.testing.junit5.RemoveTryCatchFailBlocks")
	
	activeRecipe("org.openrewrite.staticanalysis.AtomicPrimitiveEqualsUsesGet")
	activeRecipe("org.openrewrite.staticanalysis.BooleanChecksNotInverted")
	activeRecipe("org.openrewrite.staticanalysis.BufferedWriterCreationRecipes")
	activeRecipe("org.openrewrite.staticanalysis.CaseInsensitiveComparisonsDoNotChangeCase")
	activeRecipe("org.openrewrite.staticanalysis.CatchClauseOnlyRethrows")
	activeRecipe("org.openrewrite.staticanalysis.NoEmptyCollectionWithRawType")
	activeRecipe("org.openrewrite.staticanalysis.EqualsAvoidsNull")
	activeRecipe("org.openrewrite.staticanalysis.IndexOfReplaceableByContains")
	activeRecipe("org.openrewrite.staticanalysis.IsEmptyCallOnCollections")
	activeRecipe("org.openrewrite.staticanalysis.ReplaceThreadRunWithThreadStart")
	activeRecipe("org.openrewrite.staticanalysis.ReplaceWeekYearWithYear")
	activeRecipe("org.openrewrite.staticanalysis.StringLiteralEquality")
	activeRecipe("org.openrewrite.staticanalysis.UnnecessaryPrimitiveAnnotations")
	activeRecipe("org.openrewrite.staticanalysis.WriteOctalValuesAsDecimal")

	activeRecipe("org.openrewrite.java.migrate.CastArraysAsListToList")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaJava11")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaDirectExecutor")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaListsNewArrayList")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaMapsNewHashMap")
	activeRecipe("org.openrewrite.java.migrate.guava.PreferJavaUtilCollectionsSynchronizedNavigableMap")
	activeRecipe("org.openrewrite.java.migrate.guava.PreferJavaUtilOptional")
	activeRecipe("org.openrewrite.java.migrate.jacoco.UpgradeJaCoCo")
	activeRecipe("org.openrewrite.java.migrate.lang.StringRulesRecipes")
	activeRecipe("org.openrewrite.java.migrate.lang.UseStringIsEmptyRecipe")
	activeRecipe("org.openrewrite.java.migrate.lombok.LombokValToFinalVar")
	activeRecipe("org.openrewrite.java.migrate.lombok.UseLombokGetter")
	activeRecipe("org.openrewrite.java.migrate.lombok.UseLombokSetter")
	activeRecipe("org.openrewrite.java.migrate.lombok.UseNoArgsConstructor")
	activeRecipe("org.openrewrite.java.migrate.ThreadStopDestroy")
	activeRecipe("org.openrewrite.java.migrate.util.IteratorNext")
	activeRecipe("org.openrewrite.java.migrate.util.JavaUtilAPIs")
	activeRecipe("org.openrewrite.java.migrate.util.ListFirstAndLast")
	activeRecipe("org.openrewrite.java.migrate.util.OptionalNotEmptyToIsPresent")
	activeRecipe("org.openrewrite.java.migrate.util.OptionalNotPresentToIsEmpty")
	activeRecipe("org.openrewrite.java.migrate.util.OptionalStreamRecipe")
	activeRecipe("org.openrewrite.java.migrate.util.UseEnumSetOf")
	activeRecipe("org.openrewrite.java.migrate.util.UseLocaleOf")
	activeRecipe("org.openrewrite.java.migrate.util.UseMapOf")

	activeRecipe("org.openrewrite.java.spring.NoAutowiredOnConstructor")

	activeRecipe("org.openrewrite.java.spring.boot2.MigrateLoggingSystemPropertyConstants")
	activeRecipe("org.openrewrite.java.spring.boot2.MigrateMultipartConfigFactory")
	activeRecipe("org.openrewrite.java.spring.boot2.MigrateRestTemplateBuilderTimeoutByInt")
	activeRecipe("org.openrewrite.java.spring.boot2.MoveAutoConfigurationToImportsFile")
	activeRecipe("org.openrewrite.java.spring.boot2.ReplaceDeprecatedEnvironmentTestUtils")
	activeRecipe("org.openrewrite.java.spring.boot2.ReplaceExtendWithAndContextConfiguration")
	activeRecipe("org.openrewrite.java.spring.boot2.RestTemplateBuilderRequestFactory")
	activeRecipe("org.openrewrite.java.spring.boot2.SpringBootMavenPluginMigrateAgentToAgents")
	activeRecipe("org.openrewrite.java.spring.boot2.UnnecessarySpringExtension")

	activeRecipe("org.openrewrite.java.spring.framework.MigrateWebMvcConfigurerAdapter")

	activeRecipe("org.openrewrite.java.spring.http.ReplaceStringLiteralsWithHttpHeadersConstants")
	activeRecipe("org.openrewrite.java.spring.http.ReplaceStringLiteralsWithMediaTypeConstants")

	activeRecipe("org.openrewrite.java.spring.test.SpringRulesToJUnitExtension")
	    
	activeRecipe("org.openrewrite.java.testing.junit5.JUnit4to5Migration")

	setExportDatatables(true)
}
